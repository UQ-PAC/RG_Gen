Example Programs

In this directory, I've created a series of standardised tests that aim to
demonstrate the strengths and weaknesses of certain techniques. This file is a
"master reference" that contains all tests in the directory, presented in Python
syntax.

Each folder in this directory represents the test of the same name in this file.
Each of these test folders should contain the following files:
    <test_name>_r.test: ReGaSol format.
    <test_name>_t.c:    Threader format.
    <test_name>_n.txt:  Novel-prototype format.

Each test begins with:
test: <test_name>
desc: <short description of the test and what it aims to demonstrate>
properties: <list of 'property=bool'> where property is one of:
    mutual_post: Whether the postcondition for the program cannot be represented
                 as local assertions. If mutual_post=false, both the global
                 postcondition and local assertions will be included.
    local_vars:  Whether the program contains local variables.
    aux_vars:    Whether verifying the program requires introducing an auxiliary
                 variable, such as a global assignment. The auxiliary variables
                 required are described in `desc`.
    loops:       Whether the program contains loops.
Other notes:
- Test programs do not currently contain function/procedure calls.
- All variables are assumed to be ints.
- Loop invariants are omitted from test files as they are expected to be
  generated.
- Local assertions are omitted from test files for techniques that can verify
  mutual postconditions.

================================================================================
================================================================================

This table displays the properties of each test, where 'X'=true and '-'=false.
Each property represents a constraint, and hence tests with more 'X's are more
difficult in general.

NAME                        MUTUAL_POST LOCAL_VARS  AUX_VARS    LOOPS
basic_increment             X           -           -           -
uneven_increment            X           -           -           -
mutual_increment            X           -           X           -
local_assertions            -           -           -           -
branching_increments        X           -           -           -
petersons_basic             -           X           -           X
redundant_interference      -           -           -           -
conditional_lock            -           X           -           -
conditional_lock_advanced   -           X           X           -
regasol_fail                -           X           -           -

================================================================================
================================================================================

test: basic_increment
desc: An extremely bare-bones example, mostly used for testing whether the tool
      is compiling and running correctly.
properties: mutual_post=true, local_vars=false, aux_vars=false, loops=false
globals: [x]
{x == 0}
T1():
	x = x + 1
T2():
	x = 1
{x == 1 || x == 2}

================================================================================

test: uneven_increment
desc: Incrementing x in both threads may require more iterations than
      basic_increment.
properties: mutual_post=true, local_vars=false, aux_vars=false, loops=false
globals: [x]
{x == 0}
T1():
	x = x + 1
T2():
	x = x + 2
{x == 3}

================================================================================

test: mutual_increment
desc: This deceivingly-simple program requires an auxiliary variable to verify!
properties: mutual_post=true, local_vars=false, aux_vars=true, loops=false
globals: [x]
{x == 0}
T1():
    x = x + 1
T2():
    x = x + 1
{x == 2}

================================================================================

test: local_assertions
desc: A simple program with no interference and some local assert statements.
      Contains some linear arithmetic.
properties: mutual_post=false, local_vars=false, aux_vars=false, loops=false
globals: []
{true}
T1():
    v1 = 12
    v2 = 3 * v1
    assert v2 == 36
T2():
    u1 = 16
    u2 = 2 * 4 * 8 * u1
    assert u2 == 1024
{v2 == 36 && u2 == 1024}

================================================================================

test: branching_increments
desc: Extends mutual_increment with some conditional statements. Note that the
      postcondition holds regardless of the execution path. Adding an auxiliary
      variable to the second thread suffices to verify the program.
properties: mutual_post=true, local_vars=false, aux_vars=false, loops=false
globals: [x, y, z]
{x == 0 && y == 0}
T1():
    if z == 0:
        x = x + 1
    else:
        y = y + 1
    if z == 0:
        x = x + 1
    else:
        y = y + 1
    y = y + x
T2():
    y = y + 1
{y == 3}

================================================================================

test: petersons_basic
desc: The simple two-thread version of Peterson's mutual-exclusion algorithm.
      Includes some local variables for compatibility with both mutual and
      non-mutual specifications. The loop invariant can be straightforwardly
      derived from the strongest stable postcondition of the 'turn' assignment.
properties: mutual_post=false, local_vars=true, aux_vars=false, loops=true
globals: [flag1, flag2, turn, x]
{flag1 == 0 && flag2 == 0}
T1():
    flag1 = 1
    turn = 1
    while flag2 == 1 && turn == 1:
        invariant flag1 == 1 && 0 <= turn <= 1
        skip
    x = 0
    a = x
    assert a == 0
    flag1 = 0
T2():
    flag2 = 1
    turn = 0
    while flag1 == 1 && turn == 0:
        invariant flag2 == 1 && 0 <= turn <= 1
        skip
    x = 1
    b = x
    assert b == 1
    flag2 = 0
{a == 0 && b == 1}

================================================================================

test: redundant_interference
desc: Strongest-proof techniques hate this simple example.
properties: mutual_post=false, local_vars=false, aux_vars=false, loops=false
globals: [w, x, y, z]
{w == y == x == z == 0}
T1():
    w = 1
    w = 2
    w = 3
    w = 4
    assert true
T2():
    x = 1
    x = 2
    x = 3
    x = 4
    assert true
T3():
    y = 1
    y = 2
    y = 3
    y = 4
    assert true
T4():
    z = 1
    z = 2
    z = 3
    z = 4
    assert true
{true}

================================================================================

test: conditional_lock
desc: A basic conditional-based locking scheme.
properties: mutual_post=false, local_vars=true, aux_vars=false, loops=false
globals: [x, z]
{true}
T1():
    r = 0
    if z == 0:
        x = 0
        r = x
    assert r == 0
T2():
    if z == 1:
        x = 1
        z = 0
{r == 0}

================================================================================

test: conditional_lock_advanced
desc: An extension of conditional_lock that requires auxiliary variables.
properties: mutual_post=false, local_vars=true, aux_vars=true, loops=false
globals: [x, z]
{true}
T1():
    r = 0
    if z == 0:
        x = 0
        r = x
    assert r == 0
T2():
    if z == 1:
        x = 1
    z = 1
{r == 0}

================================================================================

test: regasol_fail
desc: ReGaSol fails to verify this trivial program, due to the omission of
      variable r from the precondition. The reason is still being investigated.
properties: mutual_post=false, local_vars=true, aux_vars=false, loops=false
globals: [x, z]
{x == 1 && z == 1}
T1():
    r = 0
    if z == 0:
        x = 0
    x = r
T2():
    z = 0
{x == 0}

================================================================================


